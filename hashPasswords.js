const bcrypt = require('bcryptjs');
const { Sequelize } = require('sequelize');
const { User } = require('./src/models'); // ƒê∆∞·ªùng d·∫´n c√≥ th·ªÉ thay ƒë·ªïi t√πy theo c·∫•u tr√∫c project c·ªßa b·∫°n

(async () => {
    try {
        // K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu (ch·ªânh s·ª≠a th√¥ng tin n·∫øu c·∫ßn)
        const sequelize = new Sequelize('KHACHSAN3TL', 'root', '123456', {
            host: '127.0.0.1',
            dialect: 'mysql',
            logging: false
        });

        await sequelize.authenticate();
        console.log('‚úÖ K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu th√†nh c√¥ng.');

        // L·∫•y danh s√°ch ng∆∞·ªùi d√πng
        const users = await User.findAll();

        for (const user of users) {
            if (!user.password.startsWith('$2a$')) { // Ki·ªÉm tra n·∫øu ch∆∞a m√£ h√≥a
                const hashedPassword = await bcrypt.hash(user.password, 10);
                user.password = hashedPassword;
                await user.save();
                console.log(`üîë M·∫≠t kh·∫©u c·ªßa user ${user.email} ƒë√£ ƒë∆∞·ª£c m√£ h√≥a.`);
            }
        }

        console.log('üîí T·∫•t c·∫£ m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c m√£ h√≥a th√†nh c√¥ng!');
        await sequelize.close(); // ƒê√≥ng k·∫øt n·ªëi sau khi ho√†n t·∫•t
    } catch (error) {
        console.error('‚ùå L·ªói khi m√£ h√≥a m·∫≠t kh·∫©u:', error);
    }
})();
